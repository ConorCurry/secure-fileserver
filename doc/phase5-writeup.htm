<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P5 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P5 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->

Yijia Cui yic66@pitt.edu, Conor Curry clc231@pitt.edu

<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>In this section, broadly overview your threat model, attacks, and
countermeasures.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threatmodel">
      <h2>Threat Model: Information Leakage/ modification from Servers’ and Users’ disks</h2>
<!-- BEGIN CHANGES HERE -->

<h3>Description:</h3> 
<p>Even though group server is mostly trusted in the system, but all the information stored on group server is unencrypted as plain text files, which is very vulnerable.  Attackers are assumed to be able to steal those information files from the disk of group server. Also, users and servers store their private keys locally, which is encrypted by a key derived from the password they set up with SHA-256. Because of the fast speed of hardwares, attackers can break SHA-256 keys brute-forcedly using dictionary and rainbow tables within reasonable time and steal/modify the private keys once the file is decrypted. Thus, a secure encryption should be added to files stored on the group server’s and users’ disks to ensure the confidentiality of those important information.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="attack">
      <h2>Attacks</h2>
<!-- BEGIN CHANGES HERE -->

<h3>For Group Server:</h3>
<p>The adversary can add any person into one group by modifying UserList file and GroupList file, which will give the malicious user permission to read/write files only shared within those groups. Also, the adversary can remove any person from groups to disenable them from accessing files.</p>

<p>The adversary can get list of files keys by compromising the plaintext storing that information. The leakage of file keys can lead to the unauthorized access to files that should only be accessed to members in a certain group. The adversary can read and modify files with the stolen key lists because file servers are untrusted and can leak files encrypted by keys in the lists. The adversary can even modify the key list to mess up users that they can’t decrypt the files appropriately with wrong keys. </p>

<p>The adversary can even change public keys stored in the UserList to mess up the authentication process between the user and the group server. </p>

<h3>For stored private keys:</h3>
<p>The adversary can steal encrypted private keys (with SHA-256) stored in disk and break that file to get the private key. This threat leads to the private keys being compromised. The authentication is done by RSA key pairs. Once the private key is compromised, the exchanged shared key is revealed, and all the conversation will be presented to the adversary.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="countermeasure">
      <h2>Countermeasures</h2>
<!-- BEGIN CHANGES HERE -->

<p>Instead of using keys derived from passwords with SHA-256 to encrypt private keys, the new algorithm, PBKDF2WithHmacSHA1, is used to derive keys from passwords. The iteration number of this algorithm makes it slow to break by design, to make the attack hard to achieve. 
With those keys, users and servers can store their private keys safely to reduce the possibility that private keys are compromised. Those keys can also use to encrypt important files on the servers, for example, the GroupList and UserList on the group server. The adversary could not access information encrypted in the files because of the difficulty of attacking, which prevents information being modified/leaked, like group information, file key lists, etc. 
</p>
    </section>
    <section id="threatmodel">
      <h2>Threat Model: Forward Secrecy Broken</h2>
<h3>Description:</h3> 
<p>In previous threat models, the possibility for a private key being compromised is brought up. The adversary may record all the information starting from the authentication process and break all the messages exchanged. The forward secrecy was broken in this case.</p>

</section>
    <section id="attack">
      <h2>Attacks</h2>
<p>The adversary compromises the private key first and records all the messages exchanged between the innocent user and server. Then the adversary will use the private key to get the key exchanged between them, and decrypts all the messages. That decryption of message no only reveals all the information exchanged, it also reveals the list of keys being transmitted to the user if the user requests such a list from group server.  Some files are encrypted with keys with in the list, and the adversary can use that list of file keys to decrypt those files stolen from file servers (they are untrusted). </p>

</section>
    <section id="countermeasure">
      <h2>Countermeasures</h2>
<p>Signed Diffie-Hellman will be used through the authentication and key exchanges. (Implemented)</p>

</section>
    <section id="threatmodel">
      <h2>Threat Model: DoS Attack</h2>
<h3> Description:</h3>
<p>A denial-of-service (DoS) attack can be an attmpt to make a machine unavailable to intended users. Even though the number of threads and the storage of disk are enough for legitimate uses, the adversary can make requests to consume the server’s resources and prevent real users from using those resources. </p>

</section>
    <section id="attack">
      <h2>Attacks</h2>
<p>The adversary may develop a driver to send requests only. For example, the adversary can write a program to send authentication/operation request only and never responds to the server’s reply. Because the server uses threads to communicate with different clients and a computer can support only a limited number of threads (the number may vary from computer to computer). If an adversary run such a driver multiple times until the number of threads are consumed completely on the server, no more client can connect to the server.  </p>
<p>The adversary can also consume the disk of the file server by keeping uploading huge files. Once the storage of a file server is filled up, no more files can be uploaded by legitimate users.</p>
</section>
    <section id="countermeasure">
      <h2>Countermeasures</h2>
<p>The server can close the connection with a client automatically if the client does not respond in 5 minutes. This number is reasonable because that the operations are simple enough for users to perform. If they fail to response to the interactions, they have to re-log in.</p>

<p>The server can assign file quota to the groups.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Conclude with a paragraph or two discussing your threat model and
countermeasure mechanisms. How realistic is your threat model for a real-life
file sharing system? Comment on the design process that your group followed. Did
you discuss other ideas that didn’t pan out before settling on the
above-documented approach? Did you design attacks that you were unable to
mitigate, or that you think are impossible to mitigate? Use this space to show
off your hard work!</p>

<p>Finally, spend a paragraph discussing the interplay between the
countermeasures for your proposed attacks and your techniques for mitigating
threats T1–T7 from Phases P3 and P4 of the project. Did you have to design your
countermeasures in a particular way so as not to re-introduce these older
threats?</p>

<p>If your group implemented the countermeasures or did any extra credit, please
discuss these additional contributions in this section, as well.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
