<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P3 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired.
 * Be sure your writeup still prints legibly. */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P3 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->

Yijia Cui: yic66@pitt.edu       Conor Curry: clc231@pitt.edu

<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>In this section, broadly overview the types of cryptographic techniques that
your group has decided to use to address threats T1â€“T4.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat1">
      <h2>Threat T1: Unauthorized Token Issuance</h2>
<!-- BEGIN CHANGES HERE -->

<p>A user needs to acquire a token to access the group server and the file server as well. However, it is not trustworthy that everyone who acquires the token is an authroized user. The system developed in phase 2 only needs a username to get a token from the group user, which is insesure because anyone can get that token as long as they know the username. If an adversary can know the username, he/she could access all the information related to that user stored on the group server and also all the files accessible to that username. As a result, the authentication of the user should be deployed before a token is issued. Also, the adversary can be a man in the middle, pretends to be the server and gets the messages passed from the user to the server, and then uses that information to pretend to be the user. Thus, it is also necessary for the system to authenticate the group server during this process.</p>

<p>The proposed mechanism for user authentication is the password mechanism, which requires a username-passowrd tuple. This tuple will be transmitted through the tunnel, and used to verify the user's identity. In order to ensure the security, the passwords of users should be salted and hashed with SHA-1. The Group Server will store those username-passowrds tuple and the assoicated salt into its userList. The salt will be created at random when the user first logs into the system and is required to have a password.</p>

<p> Besides the password mechanism, it is also important to authenticate the server, and ensure the transmission security. As a result, the signed Diffie-Hellman Mechanism is deployed for multi-authentication and exchanging the secret key. Suppose that both the user and the group server have their own pair of public key and private key. The user knows the public key of the group server, and the group server know the public key of the user. The private keys of the user and the group server should be assumed to be secret and only them know their own private keys. Also, the group server needs to store the user's public key in the userList, along with the information of password. Also, it is also necesary to assume that both the user and the group server know the prime numbe q and generator g used in Diffie-Hellmen Exchange.</p>

<p>Everytime the user needs to log into the system, the user needs to generate a random, but large number for challenge. This number will be used to calculate g^a mod q, the number that will be sent to the server. The user will be asked to put in his/her username, and needs to sign that generated number with his or her own private key. His/her username needs to be concatenated with the signed message, and the concatenated message will be encrypted with the server's public key, and be sent to the server side. When the server receives this message, it will decrypt this message with its own private key, and get the username and signed number. The server will search through its database to get the public key associated with this user, and use that public key to get the g^a (mod q). The server will generate another random, but large number, and calculate g^b (mod q) as well as g^(ab) mod q (as the shared secert key). The server will sign this message with its own private key, and encrypt the signed with the user's public key, and this encrypted message will be sent to the user. The user gets this message, decrypts with his/her own private key, and verify the message with the server's public key.
As a result, the user will get g^b (mod q) and calculate g^(ab) (mod q) as the shared secret key as well. Now, both the user and the group server gains their own copy of the shared secret key. The user can encrypt the password and send it to the server. The server will use that, with the stored salt, to calculate the hashed value and compare it to the stored hashed value. If those two values are the same, the authentication of the user is done, and the server will send the token encrypted with the shared secret key to the user.</p>

<p>The key exchanged protocol is secure. First, the user and the server will pick their own big, random numbers. Those numbers should be 32-bit integers, which will lead to 2^32 possible values, making it hard for the adversary to guess in brute-force. During the process of exchanging, the user and the server encrypt messages with the other side's public key, and only the the other side knows the associated private key. As a result, no one can decrypt this message except themselves The digital signature of the user and the server ensures that the message is sent from the desired identity. Also, because there is no way to calculate g^(ab) mod q given the public information (g, q, g^a (mod q), and g^b (mod q)), the shared secret key is secure, and only the server and the user know that key. Thus, messages encrypted with that secret shared key will remain secure. Furthermore, the passowrd sent to the server will be re-calcuated with the salt and hashed to be compared with the store value. Because the salt value is 12-bit, it randomizes the user's password, and eliminates the possibility that the password is broken by the adversary offline. In addition, because of the properties of hash function, it is impossible to reverse the hashed value, or find anotehr value with the same hashed value. The hash function picked is SHA-1, with O(2^61) to find a collision and O(2^80) to break. It would be super expensive for the adversary to find the value being hashed.</p>


<!-- END CHANGES HERE -->
    </section>
    <section id="threat2">
      <h2>Threat T2: Token Modification/Forgery</h2>
<!-- BEGIN CHANGES HERE -->

<p>The adversary might modify or forge tokes issused by the Group Server, and use those invalid tokens to access the files that they shouldn't have the privilege to see. Also, the information embedded in the user might be changed the malicous users to access the group information that they are not members of that group, to access the file server with that modified message.</p>

<p> In order to assure the unchanged information inside the token, digital signature will be used to valid the token. When the server assigns the token to the user, it should sign every field of that token with its private key. Then, when the user sends requests to the file server, the file server will asks for the token, and verify all the field of the token with the server's public key.</p>

<p>This mechanism is secure because only the server, the owner of the private key, can sign the message. If the user changes any information of that token, or the adversary forged one token, they can't create the digital signature because they don't know the server's private key. If they sign that message with a guessed private key, the file server, or the third-party, can find out that the message can't be verified. That is, one or more fields are changed, and the token is no longer valid.</p>
<!-- END CHANGES HERE -->
    </section>
    <section id="threat3">
      <h2>Threat T3: Unauthorized File Servers</h2>
<!-- BEGIN CHANGES HERE -->

<p>We must be assured that unauthorized file servers may not pose as legitimate servers. An illegitimate file server is a very serious security vulnerability, as it could easily perform man-in-the-middle attacks by impersonating the file server to the user, and impersonating the user to the file server. This would allow it to not only corrupt files, but modify them in transit, or even completely fabricate them. It would also break confidentiality by being able to see what files the user is requesting from the group server. It also would obviously be able to steal user tokens that were issued by the group server, seriously compromising user security.</p>
<p>The method we will use to confront these issues, and to properly authenticate the file server rely on a hybrid approach involving RSA’s public key cryptography, and AES symmetric keys. We will use highly secure key sizes (3072-bit RSA and 256-bit AES). The authentication between the user and file server will not leak information if trying to authenticate an unauthorized file server, and will be resistant to reflection attacks and man in the middle attacks. This protocol requires that the user is confident that they know the authentic file server’s public key before initiating the procedure. The authorization procedure is as follows:</p>
<p>The user’s cryptographic material includes the ticket (including ticket signature from the group server) for the user. This needs to remain secret to all except the user, group server, and authentic file servers. The user will also have a RSA keypair. </p>
<p>The file server’s cryptographic material also includes an RSA keypair. It will also have access to the group server’s public key, and will be expected to be able to create 256-bit securely random AES keys. </p>
<p>The authentication procedure begins with the user initiating a connection with the file server, and sending a secure random number, the user’s ticket (including signature), all encrypted with the server’s public key. This is concatenated with the user’s public key.</p>
<p>If authentic, the file server will be able to decrypt the random number and ticket material. The signed ticket will prove to the file server the authenticity of the user. Upon verification, and using the user’s provided public key, the file server will encrypt the user’s random number concatenated with a randomly generated AES256 key.</p>
<p>The user will then decrypt this message, and check equality of the provided random number with their own. If they match, this proves the validity of the file server to the user, and the two will be able to begin secured communication of messages and files using the provided AES256 session key.</p>
<p>As long as the user has access to the file server’s public key ahead of time, the server will be able to prove it’s authenticity using the random number challenge, and the server is able to authenticate the user, by commutativity. This is because the user has possession of a group server token, which means that the group server was able to properly perform entity authentication for the user.</p>


<!-- END CHANGES HERE -->
    </section>
    <section id="threat4">
      <h2>Threat T4: Information Leakage via Passive Monitoring</h2>
<!-- BEGIN CHANGES HERE -->

<p>Passive monitoring can easily break confidentiality guarantees that we want to provide. Information about the users’ identities, tokens, and files are all vulnerable to passive monitoring. AES256 symmetric key cryptography will be the method we use to provide secure communication channels. These keys will be shared via already described authentication procedures, and will allow for computationally efficient secure communication (as opposed to attempting to encrypt large files with RSA).</p>
<p>We will use AES256 in OFB mode to secure the required message and file communication. OFB mode is useful for allowing precomputation of the encryption, which will allow speedy file access from the server, and reduces redundant recomputation of encryption. This will help reduce load and prevent denial of service attacks against file servers. These session keys are shared in the authentication procedure between the respective server and the user, and are randomly generated each time a authenticates. This will prevent attacks resulting from key overuse. </p>
<p>Because the AES keys are shared during secure authentication, only the user and the server will be able to decrypt the messages and files sent between them. This will successfully address the problem of passive monitoring, by creating a secure tunnel for communication between the user and server.</p>


<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didnâ€™t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>

<p>If your group did any extra credit, please discuss that in this section, as
well.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
