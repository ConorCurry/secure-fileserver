<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P4 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P4 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->

William Garrison

<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->

<p>In this section, broadly overview the types of cryptographic techniques that
your group has decided to use to address threats T5–T7.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat5">
      <h2>Threat T5: Message Reorder, Replay, or Modification</h2>
<!-- BEGIN CHANGES HERE -->

<p>Begin this section by describing threat T5. This may include describing
examples of the threat being exploited by an adversary, a short discussion of
why this threat is problematic and needs to be addressed, and/or diagrams
showing how the threat might manifest in your group’s implementation from Phase
3.</p>

<h3>Mechanism used:</h3>
<p>In order to detect the message modification, HMAC-SHA256 is used. To implement HMAC-SHA256, an additional key for integrity check will be transmitted during the key exchange during the authentication. Instead of encrypting only one key, the identity key will be concatenated to the secret key, and the combined keys will be encrypted, signed, and transmitted to the group server. The group server can verify the digital signature, decrypt the combined keys, and recover the two keys. After the authentication, each message transmitted between the group server and the client will be encrypted by the shared secret key, and be calculated a HMAC value using the shared integrity key. This HMAC value will be verified each time one side receives the message and compute HMAC. If the two HMAC values do not match, it indicates that the message has been modified. </p>

<p>In order to detect the message replay and reorder, a nonce will be used to keep tracking of the current order. After the phase of authentication, the group server will send an acknowledge message to the client to verify the success of authentication. Along with that acknowledge message, the group server will randomly generate a number, concatenate it to the acknowledge message, and encrypt them with the shared secrete key.  This number will increase by one during each transmission. The group server and client can check whether the number received is the correct order. If not, it means that the message has been replayed or re-ordered. </p>

<p>Because of the secure exchange of keys, only the group server and the client know the shared secret key and the shared integrity key. Thus, only them can use HMAC and that integrity key to verify the changes.  The increasing nonce enables both sides to keep tracking of the current order. If the message is replaced/replayed, the number will be different from the current order. And those attacks can be detected immediately in this way. 
</p>

<img src = "group_threat5.png" alt="Mountain View" style="width:400px;height:228px;">
<img src = "fs_threat5.png" alt="Mountain View" style="width:400px;height:228px;">

<!-- END CHANGES HERE -->
    </section>
    <section id="threat6">
      <h2>Threat T6: File Leakage</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Mechanism used:</h3>
<p> In order to prevent file server to leak files to unauthorized users/groups, a list of secret key only available to the proper group will be used, and files will be encrypted using that list of keys on the client side and be transmitted after that. </p>
<p>When a group is created, an empty ArrayList to store secret keys will be created, along with a new generated secret key for file encryption/decryption. Every time a user is deleted from the group, a new secret key will be generated by the group server and added at the end of that list. This list of keys will be stored in the GroupList for each group.</p>
<p>When the user needs to upload/download a file, the user will send request to the group server first. The group server will send the user a new token embedded the key list of the requested group.  The token used during the communication between the file server and the client is the normal token, the token without the key list.</p>
<p>If the user needs to upload a file, he/she will always use the last key of the list to encrypt the file, and send the encrypted file along with the index of the key used to the file server (The transmission of messages between file server and the client will be protected by the shared secret key). The file server will store that encrypted file.</p>
<p>When the user needs to download a file, the file server will send the encrypted file stored and the index of the key to the client (The messages are protected by the shared secret key). The client will decrypt the file using the key at that index on the client side. </p>
<p>In order to prevent a deleted user to use the special token after some time, a timestamp will be added to the token, to check whetehr the token is expired. The expiration period of the token is 24 hours. This expiration period ensures the security that a deleted user to use the special token to fetch the files. It also decreases the load of re-requesting new tokens in a frequent manner. </p>
<p>This mechanism is secure because only the users in a specific group can access to that list of keys. The file server only stores the encrypted files, and those encrypted files can’t be read by other groups/user because they don’t have that list of keys. In addition, this mechanism ensures the updates of the files to be secure because files always are encrypted with the newest key. For example, if a user is deleted from the group, a new key will be added and used to encrypt files. If there is any modification on the files, the modified file will be encrypted with the newest key and stored at the file server. Even though the deleted user may have access to the files before he/she is deleted, he/she can never get the updates/new files because he/she no longer has access to the list of keys, which is different from what he/she has. Also, the timestamp and the expiration time prevents the user to fetch files after being deleted for a certain period of time </p>

<img src = "threat 6- upload.png" alt="Mountain View" style="width:400px;height:228px;">
<img src = "threat 6- download.png" alt="Mountain View" style="width:400px;height:228px;">
<!-- END CHANGES HERE -->
    </section>
    <section id="threat7">
      <h2>Threat T7: Token Theft</h2>
<!-- BEGIN CHANGES HERE -->

<p>Repeat the steps as for Threat T5.</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Conclude with a paragraph or two discussing the interplay between your
proposed mechanisms, and commenting on the design process that your group
followed. Did you discuss other ideas that didn’t pan out before settling on the
above-documented approach? Did you end up designing a really interesting
protocol suite that addresses multiple threats at once? Use this space to show
off your hard work!</p>

<p>Finally, spend about one paragraph convincing me that your modified protocols
still address the threats T1–T4 described in Phase 3 of the project.</p>

<p>When the user first connects to a server, the server will send the public keys to the user first. The user will save the name of the server and port number, along with the public keys, on file. If the user attempts to connect to the next server on time, he/she will look into the file and fetch the public key to connect to the server directly.</p>
 
<p>In order to support the dynamic adding of users, we will add a feature of “pending requests” for the group server. When a user wants to be created, the user will create his/her RSA key pairs and share it to the group server. This communication will be called “To_be_Created”. Once the group serve receives the request and the user’s username and the public key, it will close the connection, stores the user’s name and public key in a list to be approved by the ADMIN. When the ADMIN wants to create a user, he/she will look into the list to check whether this user sends the request or now. If the request exists, the ADMIN will create that user and add it to the userList.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>