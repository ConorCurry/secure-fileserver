<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>CS 1653 Project P4 Writeup</title>
  <style>
/* BEGIN CHANGES HERE */

/* In this section, you may add CSS styling if desired */
header {
  text-align: center;
}

/* END CHANGES HERE */
  </style>
  <body>
    <header>
      <h1>CS 1653 Project P4 Writeup</h1>
      <h2>
<!-- BEGIN CHANGES HERE -->

Yijia Cui: yic66@pitt.edu       Conor Curry: clc231@pitt.edu

<!-- END CHANGES HERE -->
      </h2>
    </header>
    <section id="overview">
      <h2>Overview</h2>
<!-- BEGIN CHANGES HERE -->
<p> This phase will consist of several cryptographic additions. These include hardening of authentication and secure communication protocols through the addition of sequential message numbers, hmac values to verify identity, and keyed message authentication codes. Token objects will be improved through expiration dates and desination keys. The main addition will be the secured storage of files on servers, and secret key versioning to permit revocation of access to future file modifications and additions. This means that the group server will be in charge of managing keyrings, and also distribution of those keys to group members via token requests.
</p>

<!-- END CHANGES HERE -->
    </section>
    <section id="threat5">
      <h2>Threat T5: Message Reorder, Replay, or Modification</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Threat Description:</h3>
<p> Threat 5 is important to consider to protect the authentication protocols used. Message replay/reorder is dangerous since it does not require an adversary to know the plaintext of a message in order to gain unauthorized access. For example, if a user is sending their encrypted token, an adversary could later replay that encrypted message, and if not properly protected, the server may accept such a token as valid. Protecting against this is implemented by nonces, which guarantees the freshness of a particular message.</p>

<p> Modification is also a large problem, as an active adversary may be able to change the data in one part of a message, while retaining other valid authenticaion data. For example, in the previous phase, we sent an authenticaion method with a nonce encrypted separately from identity information. This allowed an active adversary to replace the identity information while retaining the nonce data, which lets them exploit the protocol undetected. The modification problem can be solved by a combination encrypting concatenations of data, rather than concatenating ecryptions, and liberal usage of HMACs. These methods should be used throughout the communication, both in authentication and in general message exchange.</p>

<h3>Mechanism used:</h3>
<p>In order to detect the message modification, HMAC-SHA256 is used. To implement HMAC-SHA256, an additional key for integrity check will be transmitted during the key exchange during the authentication. Instead of encrypting only one key, the identity key will be concatenated to the secret key, and exchanged securely to the other side. The desired side can recover the two keys. After the authentication, each message transmitted between the server and the client will be encrypted by the shared secret key, and be calculated a HMAC-SHA256 value using the shared integrity key. This HMAC-SHA256 value will be sent with the encrypted message, verified each time one side receives the message and computes HMAC. If the two HMAC-SHA256 values do not match, it indicates that the message has been modified. </p>

<p>In order to detect the message replay and reorder, a nonce will be used to keep tracking of the current order. At the last step of the authentication, the server will randomly generate a number, concatenate it to the message, and securely transmit that message. This number will increase by one during each transmission. The server and client can check whether the number received is in the correct order.If not, it means that the message has been replayed or re-ordered. </p>

<h3>Correctness of the mechanism:</h3>
<p>Because of the secure exchange of keys, only the server and the client know the shared secret key and the shared integrity key. Thus, only them can encrypt/decrypt the messages with the shared secret key, and use HMAC-SHA256 and that integrity key to verify the changes. The increasing nonce enables both sides to keep tracking of the current order. If the message is replaced/replayed, the number will be different from the current order. And those attacks can be detected immediately in this way.</p>

<img src = "group_threat5.png" alt="Mountain View" style="width:400px;height:228px;">
<img src = "fs_threat5.png" alt="Mountain View" style="width:400px;height:228px;">

<!-- END CHANGES HERE -->
    </section>
    <section id="threat6">
      <h2>Threat T6: File Leakage</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Threat Description:</h3>
Because the file server is untrusted, there exists a risk that the file server leaks the files to some users who should not have access to those files originally. For example, a user in group 2 would like to look at files shared among group 1. If no proper protection is implemented and the file server sends all the files of group 1 to that user, the user will access to all the "secret" files, which should only be known by members in group 1. Thus, it is necessary to ensure that files should be only readable by members in the group. This problem can be solved by encrypting/decrypting files using a key from a list of secret keys that only members can access to.</p> 

<h3>Mechanism used:</h3>
<p> In order to prevent file server to leak files to unauthorized users/groups, a list of secret key only available to the proper group will be used, and files will be encrypted using that list of keys on the client side and be transmitted after that. </p>

<p>When a group is created, an empty ArrayList to store secret keys will be created, along with a new generated secret key for file encryption/decryption. Every time a user is deleted from the group, a new secret key will be generated by the group server and added at the end of that list. This list of keys will be stored in the GroupList for each group.</p>

<p>When the user needs to upload/download a file, the user will send request to the group server first. The group server will send the user a new token embedded the key list of the requested group.The token used during the communication between the file server and the client is the normal token, the token without the key list.</p>

<p>If the user needs to upload a file, he/she will always use the last key of the list to encrypt the file, and send the encrypted file along with the index of the key used to the file server (the transmission of messages between file server and the client will be protected by the shared secret key). The file server will store that encrypted file, and the index will be stored in the ShareFile class.</p>

<p>When the user needs to download a file, the file server will send the encrypted file stored and the index of the key to the client (the messages are protected by the shared secret key). The client will decrypt the file using the key at that index on the client side. </p>

<p>In order to prevent a deleted user to use the special token after some time, a timestamp will be added to the token, to check whetehr this special token is expired. The expiration period of the token is 10 minutes. This expiration period prevents a deleted user to use the special token to fetch the files if the token is timed out. Also, because the re-requesting of a token is implemented behind the scene, the user does not need to log in/out to achieve to re-request a new token, and such a frequent operaiton does not affect the usability and security of the applicaation.</p>

<h3>Correctness of the mechanism:</h3>
<p>This mechanism is secure because only the users in a specific group can access to that list of keys. The file server only stores the encrypted files, and those encrypted files can’t be read by other groups/user because they don’t have that list of keys. In addition, this mechanism ensures the updates of the files to be secure, because files always are encrypted with the newest key. For example, if a user is deleted from the group, a new key will be added and used to encrypt files. If there is any modification on the files, the modified file will be encrypted with the newest key and stored at the file server. Even though the deleted user may have access to the files before he/she is deleted, he/she can never get the updates/new files because he/she no longer has access to the latest list of keys, which is different from what he/she has. Also, the timestamp and the expiration time prevents the user to fetch files after being deleted after a small period of time (10 minutes). As a result, the backward secrecy is ensured.</p>

<img src = "threat 6- upload.png" alt="Mountain View" style="width:400px;height:228px;">
<img src = "threat 6- download.png" alt="Mountain View" style="width:400px;height:228px;">
<!-- END CHANGES HERE -->
    </section>
    <section id="threat7">
      <h2>Threat T7: Token Theft</h2>
<!-- BEGIN CHANGES HERE -->
<h3>Threat Description:</h3>
<p> Since fileservers cannot be trusted to keep tokens private, mechanisms must be implemented to limit the transferability of any individual token. This means that the groupserver will be more involved in granting tokens with limited access scopes, but will do so without retaining any information about the fileservers. In the previous phase, if a token were leaked, it would allow the holder of such a token a complete identity for an inauthentic user. In this sense, the Phase 3 implementation was completely transferable and irrevokable. The only scope limiting was due to the mechanism involved in providing least privilege, meaning that the group server would grant tokens applicable only to a subset of a users groups. In this phase, we are extending this idea of least privilege on a token level. This means that a particular token will grant access only to a particular fileserver, and only for a relatively short time interval. This will reduce the value of stealing any individual token, while the user retains all access permissions they had in the previous phase. </p>

<h3>Mechanism used:</h3>
<p>The mechanism for preventin token theft involves a few additions to the token structure, and the protocol for requesting a token from the group server. The token will have an added expiration date to limit the transferrability of a stolen token, as well as a field that specifies the destination fileserver where it is valid. </p>

<p> The token expiration date needs to be short so stealing a token has reduced value, while also long enough to prevent being a nuisance for exchange, or increasing the probability of a leak by often sending new versions across the network. We believe that 24 hours should be long enough to be useful, while also limiting unwanted access in the event a token is stolen. </p>

<h3>Correctness of the mechanism:</h3>
<p> The second mechanism for securing tokens is a destination server. When requesting a token from the groupserver, the user will also have to specify the public key of the fileserver that they wish the token to be valid for. A fileserver will then check that they public key matches their own public key, to make sure that the token wasn't meant for another server. This means that if a malicious server leaks tokens, authentic servers will be able to detect stolen tokens, and also provide valuable information to determine the source of the token leak. In a real life situtation, users could then be warned about a particular file server being known to leak. </p>


<!-- END CHANGES HERE -->
    </section>
    <section id="discussion">
      <h2>Discussion</h2>
<!-- BEGIN CHANGES HERE -->

<p>Proposing proper mechanisms for this phase was harder than we thought. We got stuck on the degree that we should trust file server to implement and thought the file server could not do anything except storing files. But later, during the discussion with Dr. Garrison, we realized that we should trust file server in some degree if the file server is willing to act properly.</p>

<p>For our first draft of mechanisms, we were struggling on how to do threat 6. The first idea we came up with was to encrypt the file again and again if there was any new key added into the key list. And we did lots of research on how to encrypt additively, but there were only papers but no implementation available. Also, to download all the files, encrypt them with the new key, and upload them to the file server are really expensive, if there are lots of files stored on the file server. In the end, we decided to encrypt the file with only one key (the newest key in the list), and decrypt that file with the associated key. This method brings some trade-off: it’s cheap and easy to be implemented. However, we have to decide the period of expiration to prevent the deleted user from re-using the token to upload and rewrite files already existed. It was also hard to decide what would be a good time expiration between the usability and security. In order to protect the usability, we decided to do all the operations behind the scene: once the token expires, the application will request a new token automatically. If that automatic request fails because the user is deleted from the group server, the user will be forced to quit the application. This behind-scene operation provides the usability and also security at the same time, which is an interesting feature in our protocol.</p>

<h3>Phase 3 revisited:</h3>
<h4>Threat 1: Unauthorized Token Issuance</h4>
None of threat 5-7 changes the mutual authentication between the group server and client. Even though hmac is added to the process of exchanging messages, the mutual authentication has to be done before any "real" communication starts.  That mutual authentication ensures the token to be issued to proper users. Actually, protocol 5 enhances the security of communication between the group server and the client, by preventing the message re-order, replay, and modification. Protocol 6 issues a new type of token that contains a list of secret keys to encrypt and decrypt files, encrypts/decrypts files with a proper key locally, and adds time-out to tokens. None of those operations changes the mutual authentication between the group server and client. Threat 7 only adds another new type of token, which does not change the mutual authentication either.</p>

<h4>Threat 2: Token Modification/Forgery</h4>
Even though, in threat 6 and 7, two more types of token are added. But the protocol 2 is still implemented on the tokens: every time a token is issued, the user name and groups of that token are concatenated and signed by the group server’s public key. When the file server receives a request, the verification of that digital signature will be implemented. If anything is changed, the verification will fail, and it ensures that every token is issued by the group server ad was not modified after issuance.</p>

<h4>Unauthorized File Servers</h4>
Similar to threat 1, none of threat 5-7 changes the mutual authentication between the file server and client. Even though hmac is added to the process of exchanging messages, the mutual authentication has to be done before any "real" communication starts. The mutual authentication ensures that the user connects to the desired file server properly and the keys are exchanged securely. Actually, protocol 5 enhances the security of communication between the file server and the client, by preventing the message re-order, replay, and modification. Protocol 6 issues a new type of token that contains a list of secret keys to encrypt and decrypt files, encrypts/decrypts files with a proper key locally, and adds time-out to tokens. None of those operations changes the mutual authentication between the file server and client. Threat 7 only adds another new type of token, which does not change the mutual authentication either.</p>

<h4>Information Leakage via Passive Monitoring</h4>
Because of the shared secret key exchanged between the servers and clients during the process of authentication, a secrete key is shared between the servers and clients only, which is also a fresh key for each session. After the authentication, all the messages exchanged between the servers and clients are encrypted by that shared serect key. During the authentication, all the messages are encrypted by the other side's public key, which also hides the messages from outside observers. Even though hmac values of messages are added, and new type of tokens are issued, none of them changes the secure transmission of messages. The secure transmission of files are ensured by CBC mode using the shared secret key.</p>

<h3>Extra Credits:</h3>
<p>In this phase, we made some adjustments to make the set up between clients and servers more dynamically. In the previous phase, we assumed that all the public keys were available on the website, and users/servers needed to check the website to fetch the public keys.</p>

<p>Now, the assumption is that the public keys are still on the website, and users can check the public key he/she receives on that website. However, the process of getting server’s public key changed.</p>

<p>When the user first connects to a server, the server will send the public keys to the user first. The client needs to choose whether he/she wants to accept that public key, by checking the public key posted on the website (assumed). If the user chooses to accept that key, the user will save the name of the server and port number, along with the public key, on file. If the user attempts to connect to the same server next time, he/she will look into the saved file and fetch the public key to connect to the server directly.</p>
 
<p>In order to support the dynamic adding of users, we will add a feature of “pending requests” for the group server. When a user wants to be created, the user will create his/her RSA key pairs and share the public key to the group server, as a request to be added as a user. Once the group serve receives the request containing the user’s username and the public key, it will close the connection, stores the user’s name and public key in a file to be approved by the ADMIN. When the ADMIN logs in, he/she will see an option of "Pending Request" and look into the list to check whether there is any pending request. If requests exist, the ADMIN can choose to approve requests and created corresponding new users.</p>

<!-- END CHANGES HERE -->
    </section>
  </body>
</html>
